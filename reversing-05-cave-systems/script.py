#!/usr/bin/env python3

import z3


s = z3.Solver()

args = []
for i in range(9):

    arg = []
    for j in range(8):

        arg.append(z3.BitVec(f'flag{i}{j}', 8))

        # the solution must be composed by valid ascii characters
        s.add(arg[j] >= 0x20)
        s.add(arg[j] <= 0x7e)

    args.append(arg)


s.add(args[0][1] == ord('H'))
s.add(args[0][2] == ord('T'))
s.add(args[0][3] == ord('B'))
s.add(args[0][4] == ord('{'))

s.add(args[3][5] * args[7][0] == ord('\x14'))
s.add(args[5][0] - args[5][4] == -6)
s.add(args[5][5] - args[4][2] == -0x2a)
s.add(args[3][0] - args[7][0] == ord('\b'))
s.add(args[7][7] - args[2][0] == -0x2b)
s.add(args[4][2] * args[1][7] == -0x13)
s.add(args[1][4] * args[4][0] == -0x38)
s.add(args[5][2] ^ args[4][4] == 0x55)
s.add(args[4][6] - args[7][7] == ord('4'))
s.add(args[8][3] + args[7][2] == -0x71)
s.add(args[6][4] + args[4][3] == -0x2a)
s.add(args[3][1] ^ args[2][6] == 0x31)
s.add(args[8][0] * args[3][4] == -0x54)
s.add(args[8][2] - args[4][2] == -0x3e)
s.add(args[4][2] ^ args[1][6] == 0x2f)
s.add(args[2][6] ^ args[5][7] == 0x5a)
s.add(args[6][4] ^ args[5][7] == 0x40)
s.add(args[6][0] == args[4][2])
s.add(args[3][7] + args[7][1] == -0x68)
s.add(args[3][7] * args[8][3] == ord('h'))
s.add(args[1][1] - args[4][4] == -0x25)
s.add(args[4][0] - args[4][5] == -0x2e)
s.add(args[5][6] - args[4][0] == ord('.'))
s.add(args[5][0] ^ args[3][6] == 0x1a)
s.add(args[6][4] * args[1][4] == -0x60)
s.add(args[5][6] * args[4][3] == ord('^'))
s.add(args[2][7] - args[6][0] == -0x38)
s.add(args[7][1] ^ args[7][5] == 0x56)
s.add(args[4][2] ^ args[6][5] == 0x2b)
s.add(args[7][6] ^ args[2][1] == 0x19)
s.add(args[4][4] - args[6][7] == ord('\x1a'))
s.add(args[7][2] + args[3][3] == -0x5f)
s.add(args[5][5] + args[8][1] == ord('V'))
s.add(args[4][5] ^ args[3][2] == 0x38)
s.add(args[6][4] ^ args[8][4] == 9)
s.add(args[2][7] * args[5][6] == ord('y'))
s.add(args[5][5] ^ args[4][6] == 0x5d)
s.add(args[1][2] * args[5][0] == ord('\\'))
s.add(args[2][2] * args[3][2] == ord('9'))
s.add(args[4][5] == args[3][5])
s.add(args[5][3] * args[3][5] == ord('/'))
s.add(args[2][0] * args[5][5] == -0x55)
s.add(args[5][7] + args[4][2] == -0x6d)
s.add(args[4][2] ^ args[5][2] == 0x73)
s.add(args[3][4] ^ args[4][7] == 0x40)
s.add(args[4][1] + args[3][0] == -0x57)
s.add(args[5][7] ^ args[8][3] == 0x15)
s.add(args[1][0] + args[8][3] == ord('i'))
s.add(args[5][2] + args[6][6] == -0x5b)
s.add(args[4][6] ^ args[7][4] == 0x37)
s.add(args[1][0] * args[4][4] == ord('\b'))
s.add(args[5][2] - args[8][0] == -0x3b)
s.add(args[3][2] + args[8][4] == -0x1c)
s.add(args[5][3] ^ args[6][0] == 0x6e)
s.add(args[8][0] * args[3][0] == -0x54)
s.add(args[7][6] - args[6][7] == ord('\r'))
s.add(args[4][6] + args[7][7] == -100)
s.add(args[1][6] + args[5][1] == -0x2c)
s.add(args[1][7] * args[4][5] == -0x13)
s.add(args[8][0] ^ args[4][5] == 0x38)
s.add(args[1][1] * args[5][5] == ord('d'))
s.add(args[8][0] ^ args[8][2] == 0x46)
s.add(args[1][2] * args[3][3] == ord('&'))
s.add(args[4][2] ^ args[3][6] == 0x2b)
s.add(args[1][1] + args[1][7] == -0x79)
s.add(args[4][3] ^ args[1][0] == 0x2a)
s.add(args[3][5] - args[1][1] == ord('\v'))
s.add(args[4][3] + args[7][6] == -0x32)
s.add(args[3][1] ^ args[2][5] == 0x3b)
s.add(args[3][3] - args[8][2] == ord('\x12'))
s.add(args[3][1] == args[2][2])
s.add(args[2][6] - args[8][2] == ord('M'))
s.add(args[6][2] * args[7][4] == ord('N'))
s.add(args[7][2] == args[5][0])
s.add(args[6][7] ^ args[7][3] == 0x38)
s.add(args[5][6] + args[4][1] == -0x6c)
s.add(args[6][1] + args[7][4] == -0x31)
s.add(args[6][4] == args[3][4])
s.add(args[2][4] + args[4][1] == ord('f'))
s.add(args[8][4] + args[5][4] == -0xf)
s.add(args[6][1] - args[3][5] == ord('\x11'))
s.add(args[5][4] - args[7][1] == ord('D'))
s.add(args[2][1] - args[5][3] == ord('D'))
s.add(args[7][5] ^ args[7][3] == 1)
s.add(args[5][2] ^ args[8][1] == 0xd)
s.add(args[2][3] - args[4][4] == -0x15)
s.add(args[3][7] + args[4][0] == -0x67)
s.add(args[4][0] + args[2][5] == -0x6b)
s.add(args[2][4] - args[1][0] == -0x17)
s.add(args[5][2] + args[4][7] == ord('`'))
s.add(args[1][5] + args[7][5] == -0x6a)
s.add(args[7][1] * args[6][2] == ord('`'))
s.add(args[7][0] * args[3][5] == ord('\x14'))
s.add(args[4][3] - args[7][4] == ord('\x03'))
s.add(args[8][1] + args[3][4] == -0x6b)
s.add(args[2][2] * args[7][5] == -0x26)
s.add(args[1][1] + args[6][1] == -0x3c)
s.add(args[6][7] - args[1][1] == ord('\v'))
s.add(args[6][3] == args[3][3])
s.add(args[5][7] + args[6][7] == -0x6d)
s.add(args[2][4] * args[8][2] == ord('Q'))
s.add(args[2][0] * args[4][2] == ord('A'))
s.add(args[6][6] - args[4][7] == ord('E'))
s.add(args[1][7] + args[5][5] == ord('h'))
s.add(args[5][4] + args[1][4] == -0x44)
s.add(args[4][7] + args[5][0] == -0x5e)
s.add(args[4][1] + args[1][5] == ord('e'))
s.add(args[6][3] * args[4][5] == -0x13)
s.add(args[2][5] ^ args[6][5] == 0x10)
s.add(args[7][0] - args[2][4] == ord(';'))
s.add(args[3][7] - args[2][0] == ord('\t'))
s.add(args[1][7] ^ args[6][2] == 0x41)
s.add(args[1][5] - args[6][3] == -3)
s.add(args[8][4] ^ args[3][2] == 0x1a)
s.add(args[1][1] ^ args[1][3] == 0x2f)
s.add(args[3][1] - args[5][7] == ord('+'))
s.add(args[2][0] + args[3][4] == -0x2d)
s.add(args[2][3] * args[7][5] == -0x28)
s.add(args[4][3] + args[1][6] == -0x2e)
s.add(args[1][5] + args[1][3] == -0x55)
s.add(args[5][3] - args[6][7] == -0x2e)
s.add(args[3][0] ^ args[5][1] == 0x10)

if s.check() != z3.sat:
    print('No solutions')
    exit()

m = s.model()

flag = ""

for i in range(9):
    for j in range(8):
        v = m.eval(args[i][j])
        v = v.as_string()
        flag += chr(int(v))

print(flag)
